---
import Button from "./ui/button.astro";
---

<form id="contactForm" class="needs-validation" novalidate>
  <div class="mb-5">
    <input
      type="text"
      placeholder="Nombre completo"
      required
      class="w-full px-4 py-3 border-2 placeholder:text-gray-800 rounded-md outline-none focus:ring-4 border-gray-300 focus:border-gray-600 ring-gray-100"
      name="name"
    />
    <div class="empty-feedback invalid-feedback text-red-400 text-sm mt-1">
      Por favor escribe tu nombre
    </div>
  </div>
  <div class="mb-5">
    <label for="email_address" class="sr-only">Correo electrónico</label>
    <input
      id="email_address"
      type="email"
      placeholder="Correo"
      name="email"
      required
      class="w-full px-4 py-3 border-2 placeholder:text-gray-800 rounded-md outline-none focus:ring-4 border-gray-300 focus:border-gray-600 ring-gray-100"
    />
    <div class="empty-feedback text-red-400 text-sm mt-1">
      Escribe un correo electrónico
    </div>
    <div class="invalid-feedback text-red-400 text-sm mt-1">
      Correo electrónico inválido
    </div>
  </div>
  <div class="mb-3">
    <textarea
      name="message"
      required
      placeholder="Mensaje"
      class="w-full px-4 py-3 border-2 placeholder:text-gray-800 rounded-md outline-none h-36 focus:ring-4 border-gray-300 focus:border-gray-600 ring-gray-100"
    ></textarea>
    <div class="empty-feedback invalid-feedback text-red-400 text-sm mt-1">
      Por favor coloca un mensaje
    </div>
  </div>
  <Button type="submit" size="lg" block>Enviar</Button>
  <div id="result" class="mt-3 text-center"></div>
</form>

<style>
  .invalid-feedback,
  .empty-feedback {
    display: none;
  }

  .was-validated :placeholder-shown:invalid ~ .empty-feedback {
    display: block;
  }

  .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
    display: block;
  }

  .is-invalid,
  .was-validated :invalid {
    border-color: #dc3545;
  }
</style>

<script>
  import emailjs from "@emailjs/browser"

  const form = document.getElementById("contactForm") as HTMLFormElement;
  const result = document.getElementById("result") as HTMLDivElement;

  form.addEventListener("submit", function (e) {
    e.preventDefault();
    form.classList.add("was-validated");
    if (!form.checkValidity()) {
      form.querySelectorAll(":invalid")[0].focus();
      return;
    }
    
    const formData = new FormData(form);
    const serviceID = import.meta.env.PUBLIC_EMAILJS_SERVICE_ID;
    const templateID = import.meta.env.PUBLIC_EMAILJS_TEMPLATE_ID;
    const userID = import.meta.env.PUBLIC_EMAILJS_USER_ID;

    result.innerHTML = "Enviando...";

    emailjs.sendForm(serviceID, templateID, form, userID)
      .then((response) => {
        if (response.status == 200) {
          result.classList.add("text-green-500");
          result.innerHTML = "¡Mensaje enviado exitosamente!";
        } else {
          result.classList.add("text-red-500");
          result.innerHTML = "Hubo un error al enviar el mensaje.";
        }
      })
      .catch((error) => {
        console.log("Error:", error);
        result.classList.add("text-red-500");
        result.innerHTML = "Algo salió mal. Inténtelo de nuevo.";
      })
      .finally(() => {
        form.reset();
        form.classList.remove("was-validated");
        setTimeout(() => {
          result.style.display = "none";
        }, 5000);
      });
  });

  emailjs.init(import.meta.env.PUBLIC_EMAILJS_USER_ID);
</script>

